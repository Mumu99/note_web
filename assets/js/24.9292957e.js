(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{382:function(e,a,l){"use strict";l.r(a);var t=l(42),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"总结-webpack"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#总结-webpack"}},[e._v("#")]),e._v(" 总结 Webpack")]),e._v(" "),l("h3",{attrs:{id:"webpack-基本概念"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack-基本概念"}},[e._v("#")]),e._v(" Webpack 基本概念")]),e._v(" "),l("ol",[l("li",[e._v("entry 入口")])]),e._v(" "),l("ul",[l("li",[e._v("以某个文件为入口开始打包")]),e._v(" "),l("li",[e._v("分类\n"),l("ul",[l("li",[e._v("单入口 String\n"),l("ul",[l("li",[e._v("只会输出一个文件")]),e._v(" "),l("li",[e._v("单页面应用（SPA）")])])]),e._v(" "),l("li",[e._v("多入口 Array / Object\n"),l("ul",[l("li",[e._v("Array 只会输出一个文件")]),e._v(" "),l("li",[e._v("Object 会输出多个文件\n"),l("ul",[l("li",[e._v("多页面应用")])])])])])])])]),e._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[e._v("output 输出")])]),e._v(" "),l("ul",[l("li",[e._v("打包后资源输出到哪里去")])]),e._v(" "),l("ol",{attrs:{start:"3"}},[l("li",[e._v("loader 加载器")])]),e._v(" "),l("ul",[l("li",[e._v("webpack 本身只能识别 json、js 模块，其他模块一旦加载就会报错")]),e._v(" "),l("li",[e._v("需要借助 loader 帮助 webpack 识别它识别不了的模块")])]),e._v(" "),l("ol",{attrs:{start:"4"}},[l("li",[e._v("plugins 插件")])]),e._v(" "),l("ul",[l("li",[e._v("loader 功能有限，要想做功能更加强大的工作交给插件")])]),e._v(" "),l("ol",{attrs:{start:"5"}},[l("li",[e._v("mode")])]),e._v(" "),l("ul",[l("li",[e._v("模式：开发环境（development）和生产环境（production）")])]),e._v(" "),l("h3",{attrs:{id:"webpack-基本配置"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack-基本配置"}},[e._v("#")]),e._v(" Webpack 基本配置")]),e._v(" "),l("ol",[l("li",[e._v("处理 JS 文件\neslint-loader\n在 package.json 中配置 eslintConfig 来指示 eslint-loader 到底要干什么事\nenfore: 'pre' 优先执行\nbabel-loader\n在 package.json 中配置 babel 来指示 babel-loader 到底要干什么事")]),e._v(" "),l("li",[e._v("处理 Vue 文件\nvue-loader")]),e._v(" "),l("li",[e._v("处理 JSX 文件\nbabel-loader\npresets: ['@babel/preset-react']")]),e._v(" "),l("li",[e._v("处理 CSS 文件\n开发环境：创建 style 标签插入样式\nstyle-loader\ncss-loader\npostcss-loader\nless-loader / sass-loader / stylus-loader\n生产环境：提取单独 css 文件，将来通过 link 引入\nMiniCssExtractPlugin.loader（还需要配置插件 new MiniCssExtractPlugin）\ncss-loader\npostcss-loader\nless-loader / sass-loader / stylus-loader")]),e._v(" "),l("li",[e._v("处理 HTML 文件\nnew HtmlWebpackPlugin({ template: './public/index.html' })")]),e._v(" "),l("li",[e._v("处理图片文件\nurl-loader\nlimit: 10000 小于 10kb 一下的图片会被 base64 处理")]),e._v(" "),l("li",[e._v("处理其他类型文件（如字体图标、音视频等）\nfile-loader 原封不动输出")])]),e._v(" "),l("h3",{attrs:{id:"webpack-优化手段"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化手段"}},[e._v("#")]),e._v(" Webpack 优化手段")]),e._v(" "),l("ul",[l("li",[e._v("优化打包构建速度")])]),e._v(" "),l("ol",[l("li",[e._v("HMR 热模块替换\n为什么要用？\n默认情况下，一旦修改了代码，全部代码重新编译刷新，速度慢（全体刷新）\n有什么作用？\n只更新修改的模块，其他模块不变（局部更新）"),l("br"),e._v("\n怎么使用？\ndevServer: { hot: true }"),l("br"),e._v("\nnew webpack.HotModuleReplacementPlugin()"),l("br"),e._v("\n注意：默认情况下只有样式文件有 HMR 功能（style-loader），JS 是没有的\n开启 JS 的 HMR 功能：\n"),l("ol",[l("li",[e._v("手写 JS 代码 --\x3e module.hot.accpet('模块路径', () => {})")]),e._v(" "),l("li",[e._v("在 Vue 使用 --\x3e vue-loader")]),e._v(" "),l("li",[e._v("在 React 使用 --\x3e react-hot-loader")])])]),e._v(" "),l("li",[e._v("cache 缓存\neslint 和 babel 两个任务处理 JS 文件，时间一般会比较长，为了让其重新构建速度更快\n可以使用缓存。\neslint --\x3e cache: true\nbabel --\x3e cacheDirectory: true")])]),e._v(" "),l("p",[e._v("cache-loader 放置在要缓存 loader 的后面\n注意：一般只针对耗时长的任务：eslint-loader/babel-loader/vue-loader")]),e._v(" "),l("ol",{attrs:{start:"3"}},[l("li",[e._v("oneOf\n作用：让模块只被一个 loader 处理，其他的就不看了~\n能够提升打包速度~\n注意：eslint-loader（外） / babel-loader（内）")]),e._v(" "),l("li",[e._v("多进程打包\n过去: happyPack\n现在: thread-loader\n用法和 cache-loader 差不多，放在要使用 loader 后面执行\n作用：开启多进程处理前面的任务，提升打包速度\n注意：每个进程开启和通信都有开销，一般只针对耗时长的任务：babel-loader")])]),e._v(" "),l("ul",[l("li",[e._v("优化打包代码体积和性能")])]),e._v(" "),l("ol",[l("li",[e._v("兼容性处理\nJS\n"),l("ol",[l("li",[e._v("babel-loader presets: ['@babel/preset-env'] 问题就是只能编译/转换简单语法")]),e._v(" "),l("li",[e._v("@babel/polyfill 做复杂语法兼容，问题是体积太大了")]),e._v(" "),l("li",[e._v("core-js 在@babel/preset-env 基础上，增加了 useBuiltIns: 'usage'来实现按需加载\nCSS"),l("br"),e._v("\npostcss-loader\n在 package.json 中指定 browserslist 来指示 postcss-loader 兼容性做到什么程度")])])]),e._v(" "),l("li",[e._v("tree shaking 树摇\n去除没有使用的 JS 代码\n注意：\n"),l("ol",[l("li",[e._v("必须使用 ES6 模块化（需要禁止@babel/preset-env 转换 ES6 模块化语法 modules: false）")]),e._v(" "),l("li",[e._v("开启 webpack 的生产模式（内部启用 TerserPlugin，用来压缩 JS 代码的插件，tree shaking 功能就是这个插件完成的）")]),e._v(" "),l("li",[e._v("在 package.json 配置 sideEffects 来指定哪些文件需要进行 tree shaking")])])]),e._v(" "),l("li",[e._v("code split 代码分割 / lazy loading 懒加载\n作用：1. 抽取公共代码 2. 拆分多个文件，减少单个文件体积（避免单次请求时间过长）\n配置：\n"),l("ol",[l("li",[e._v("多入口 + optimization\n将 node_modules 抽取成单独模块\n将多入口的公共模块也抽取成单独模块")]),e._v(" "),l("li",[e._v("单入口 + optimization + import\n将 node_modules 抽取成单独模块\n动态导入语法 import 就能将某些文件抽取成单独模块\n"),l("ol",[l("li",[e._v("原生 JS")]),e._v(" "),l("li",[e._v("React，可以使用 Suspence + lazy 来实现路由组件的动态导入")]),e._v(" "),l("li",[e._v("Vue，() => import('./Foo.vue')\nReact 和 Vue 的目的都是为了将路由组件抽取成单独模块，单独加载（懒加载）")])])])])]),e._v(" "),l("li",[e._v("preload 和 prefetch 预加载\n作用：让资源提前加载\n区别：\npreload 让当前页面的要使用资源加载（延后加载）\nprefetch 让后面要使用资源提前加载（当前不需要使用）\n使用：\nimport(/_ webpackPrefetch: true _/'./xxx')\n问题：兼容性较差")]),e._v(" "),l("li",[e._v("cache 缓存")]),e._v(" "),l("li",[e._v("hash")])]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("webpack每次构建都会生成一个新的且唯一的hash\n问题：只要webpack重新构建，所有文件的hash都会发生变化，缓存就会失效\n")])])]),l("ol",{attrs:{start:"2"}},[l("li",[e._v("chunkhash")])]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("打包属于同一个chunk，就共享同一个hash\n问题：样式文件被css-loader打包js文件中，导致样式文件和js文件属于同一个chunk，共享同一个hash\n一旦样式文件发生变化，js文件也会变\n")])])]),l("ol",{attrs:{start:"3"}},[l("li",[e._v("contenthash")])]),e._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("根据文件的内容来成hash，所以只要文件内容不一样，hash就不一样\n问题：比如A模块有一个依赖，是B模块，那么A模块内部就会保存B模块hash值，\n  一旦B模块发生变化，B模块的hash值就会变，导致A模块内部保存B模块hash值也发生改变\n  此时A模块文件内容发生变化，它的hash值也会变\n解决：runtimechunk: true 将A模块保存的B模块hash值存到runtime文件中，这样A模块内部就没有B模块的hash值了，就不会因为B模块的修改而修改\n")])])]),l("p",[e._v("最终：就能让资源进行持久缓存")]),e._v(" "),l("ol",{attrs:{start:"6"}},[l("li",[e._v("PWA 渐进式网络应用程序\n作用：让我们开发的 App，即使离线也可以访问\n内部使用 service worker + cache 实现的\n具体实现我们借助插件 workbox-webpack-plugin")])]),e._v(" "),l("h3",{attrs:{id:"webpack-原理分析"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack-原理分析"}},[e._v("#")]),e._v(" Webpack 原理分析")])])}),[],!1,null,null,null);a.default=s.exports}}]);