(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{371:function(t,i,v){"use strict";v.r(i);var _=v(42),a=Object(_.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),v("p",[v("strong",[t._v("作者:林纳斯·托瓦兹")])]),t._v(" "),v("h3",{attrs:{id:"git-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-是什么"}},[t._v("#")]),t._v(" Git 是什么?")]),t._v(" "),v("blockquote",[v("p",[t._v("Git 是目前世界上最先进的分布式版本控制系统")])]),t._v(" "),v("h3",{attrs:{id:"将版本库分为两部分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#将版本库分为两部分"}},[t._v("#")]),t._v(" 将版本库分为两部分:")]),t._v(" "),v("ul",[v("li",[t._v("本地版本库")]),t._v(" "),v("li",[t._v("远程版本库(github)")])]),t._v(" "),v("h3",{attrs:{id:"木木的-git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#木木的-git"}},[t._v("#")]),t._v(" 木木的 git")]),t._v(" "),v("p",[v("strong",[t._v("用户名 mumu 2411639676@qq.com")])]),t._v(" "),v("h3",{attrs:{id:"配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),v("ul",[v("li",[t._v('git config --global user.name "Your Name"')]),t._v(" "),v("li",[t._v('git config --global user.email "email@example.com"')]),t._v(" "),v("li",[t._v("git config user.name 查看配置的姓名")]),t._v(" "),v("li",[t._v("git config user.email 查看配置的邮箱")])]),t._v(" "),v("h3",{attrs:{id:"git-指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-指令"}},[t._v("#")]),t._v(" git 指令")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("wq 保存退出")])]),t._v(" "),v("li",[v("p",[t._v("q 退出")])]),t._v(" "),v("li",[v("p",[t._v("q!强制退出")])]),t._v(" "),v("li",[v("p",[t._v("mkdir xxx 新建文件夹")])]),t._v(" "),v("li",[v("p",[t._v("vi x.txt 新建文件（Visual editor）")])]),t._v(" "),v("li",[v("p",[t._v("输入 i 进入编辑模式")])]),t._v(" "),v("li",[v("p",[t._v("ESC + ：+ wq 保存并退出")])]),t._v(" "),v("li",[v("p",[t._v("cd xxx 进入 xxx 目录")])]),t._v(" "),v("li",[v("p",[t._v("cd .. 返回上一级目录")])]),t._v(" "),v("li",[v("p",[t._v("ls 列出当前文件夹中所有文件")])]),t._v(" "),v("li",[v("p",[t._v("pwd 显示当前目录")])]),t._v(" "),v("li",[v("p",[t._v("cat x.txt 显示文件内容")])]),t._v(" "),v("li",[v("p",[t._v("clear 清屏")])]),t._v(" "),v("li",[v("p",[t._v("pwd：显示当前目录的路径")])]),t._v(" "),v("li",[v("p",[t._v("cat xx：查看 xx 文件内容")])]),t._v(" "),v("li",[v("p",[t._v("git init：吧当前的目录变成可以管理的 git 仓库，生成隐藏的.git 文件")])]),t._v(" "),v("li",[v("p",[t._v("git add xx：把 xx 文件添加到暂存区")])]),t._v(" "),v("li",[v("p",[t._v("git commit -m “xx”：提交文件 -m 后面的是注释")])]),t._v(" "),v("li",[v("p",[t._v("git status：查看仓库状态 - 红色：位于工作区 - 绿色：位于暂存区 - 没有显示：位于版本区")])]),t._v(" "),v("li",[v("p",[t._v("git log：查看历史记录")])]),t._v(" "),v("li",[v("p",[t._v("git reset --hard HEAD^：网上回退一个版本")])]),t._v(" "),v("li",[v("p",[t._v("git reflog：查看历史记录的版本号 id")])]),t._v(" "),v("li",[v("p",[t._v("git checkout -- xx：把 xx 文件在工作区的修改全部撤销")])]),t._v(" "),v("li",[v("p",[t._v("git rm xx：删除 xx 文件 之后要 commit")])]),t._v(" "),v("li",[v("p",[t._v("git remote add origin https://- - github.com/qiuhaifeng01/a.git 关联一个远程库")])]),t._v(" "),v("li",[v("p",[t._v("git push -u（第一次要用-u 以后不用）- - origin master：把当前 master 分支推送到远程库")])]),t._v(" "),v("li",[v("p",[t._v("git clone https://github.com/xxxxx 从远程库中克隆")])]),t._v(" "),v("li",[v("p",[t._v("git checkout -b dev：创建 dev 分支 并切换到 dev 分支上")])]),t._v(" "),v("li",[v("p",[t._v("git branch：查看当前所有的分支")])]),t._v(" "),v("li",[v("p",[t._v("git checkout master：切换回 master 分支")])]),t._v(" "),v("li",[v("p",[t._v("git merge dev：在当前分支合并 dev 分支")])]),t._v(" "),v("li",[v("p",[t._v("git branch -d dev：删除 dev 分支")])]),t._v(" "),v("li",[v("p",[t._v("git branch xxx：创建分支 xxx")])]),t._v(" "),v("li",[v("p",[t._v("git remote：查看远程库信息")])]),t._v(" "),v("li",[v("p",[t._v("git remote -v 查看远程库的详细信息")])]),t._v(" "),v("li",[v("p",[t._v("git pull origin master 将远程库的更新拉取到本地来")])]),t._v(" "),v("li",[v("p",[t._v("git push origin master git 会把 master 分支推送到远程库对应的分支上")])]),t._v(" "),v("li",[v("p",[t._v("git fetch origin dev1:dev2 git 会把 dev1 分支拉取到本地 dev2 分支上来 ### 创建版本库")])]),t._v(" "),v("li",[v("p",[t._v("1)git init 初始化本地版本库 - 创建成功会提示 Initialized empty Git repository in D:study/1108_Web/Web 前端课程/直播课/高级部分/SVN 课程/0229/test/.git/")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("\t- 没有初始化执行git命令，会提示fatal: Not a git repository (or any of the parent directories): .git\n\n\t- 你还会发现目录上多出一个.git的文件夹,这个文件夹是Git来跟踪管理版本库的，不要去修改这个文件里的内容。\n")])])])]),t._v(" "),v("li",[v("p",[t._v("2)git add x.txt 添加指定文件到仓库中 - 不会有任何提示，但是提交成功了")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("\t- 失败会提示fatal: pathspec 'x.txt' did not match any files\n\n\t- 可能会出现警告，由于linux和window的换行符不一致导致的。\n\n\t- 警告内容：warning: LF will be replaced by CRLF in a.txt.\n\n\t- 解决方式：git config --global core.autocrlf false\n")])])])]),t._v(" "),v("li",[v("p",[t._v("3)怎么查看有没有添加成功呢？ - git status "),v("strong",[t._v("红色表示在工作区，绿色表示在暂存区")])])]),t._v(" "),v("li",[v("p",[t._v("4)git commit -m 'xxx'提交所有文件")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("- 提交成功会提示：[master (root-commit) 88bbb64] first commit\n")])])]),v("p",[t._v("1 file changed, 2 insertions(+)\ncreate mode 100644 x.txt")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("- 如果只输入git commit会出问题，ESC + ：+ wq 退出就好\n")])])]),v("h3",{attrs:{id:"git-的三区-git-将本地仓库分为三个区域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-的三区-git-将本地仓库分为三个区域"}},[t._v("#")]),t._v(" git 的三区(git 将本地仓库分为三个区域)")])])]),t._v(" "),v("ul",[v("li",[t._v("工作区:开发代码的地方(没有版本控制)\n_ 新建一个文件\n_ 修改一个文件")]),t._v(" "),v("li",[t._v("暂存区:暂时保存的地方(没有版本控制) * git add 文件")]),t._v(" "),v("li",[t._v('版本区:代码进行 git 版本控制的地方 * git commit - "xxx"')])]),t._v(" "),v("h3",{attrs:{id:"版本回退"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),v("ul",[v("li",[t._v("git reset --hard HEAD^ 版本回退(一个^代表回退一次);")]),t._v(" "),v("li",[t._v("git reset --hard Obfafd 回退到指定的 commit id 版本")])]),t._v(" "),v("h3",{attrs:{id:"差异对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#差异对比"}},[t._v("#")]),t._v(" 差异对比")]),t._v(" "),v("ul",[v("li",[t._v("git diff：比较工作区和暂存区")]),t._v(" "),v("li",[t._v("git diff --cached：比较暂存区和版本区")]),t._v(" "),v("li",[t._v("git diff master：比较工作区与版本区")])]),t._v(" "),v("h3",{attrs:{id:"日志-版本号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日志-版本号"}},[t._v("#")]),t._v(" 日志+版本号")]),t._v(" "),v("ul",[v("li",[t._v("git log：显示从最近到最远的所有提交日志")]),t._v(" "),v("li",[t._v("git reflog：显示每次提交(commit)的 commit id")])]),t._v(" "),v("h3",{attrs:{id:"删除文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),v("ul",[v("li",[t._v("git rm x.txt 删除文件")]),t._v(" "),v("li",[t._v("git rm -r x.txt 删除文件夹")])]),t._v(" "),v("h3",{attrs:{id:"分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),v("ul",[v("li",[t._v("git checkout -b dev：创建分支，并切换到 dev 分支")]),t._v(" "),v("li",[t._v("git checkout master：切分支")]),t._v(" "),v("li",[t._v("git merge dev 合并 dev 分支到当前分支")]),t._v(" "),v("li",[t._v("git branch 查看分支")]),t._v(" "),v("li",[t._v("git branch -d dev 删除指定分支")]),t._v(" "),v("li",[t._v("git diff branch1 branch2 显示出两个分支之间所有差异的文件的详细差异")])]),t._v(" "),v("h3",{attrs:{id:"版本冲突"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#版本冲突"}},[t._v("#")]),t._v(" 版本冲突")]),t._v(" "),v("blockquote",[v("p",[t._v("合并分支的时候,如果在同一个文件,在同一个地方,都修改了或新增内容会引起版本冲突"),v("br"),t._v("\n解决版本冲突的最好办法就是手动解决,去文件里面直接修改")])])])}),[],!1,null,null,null);i.default=a.exports}}]);