(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{356:function(a,t,s){a.exports=s.p+"assets/img/yx.c9c0209b.png"},357:function(a,t,s){a.exports=s.p+"assets/img/sjlh.e47dc913.png"},376:function(a,t,s){"use strict";s.r(t);var n=s(42),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"高级-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级-js"}},[a._v("#")]),a._v(" 高级 Js")]),a._v(" "),n("h3",{attrs:{id:"变量和常量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量和常量"}},[a._v("#")]),a._v(" 变量和常量")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 变量:用来存放数据,保存的数据可以修改\n  2. 常量:用来存放数据,保存的数据不可修改\n  3. 变量和常量的本质,无论是变量还是常量,其本身都是数据,也需要在内存中占用内存空间,保存在内存的栈结构分区中\n")])])]),n("h3",{attrs:{id:"数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1.ECMAScript标准定义了8种数据类型\n    - 7种原始数据类型\n    - String,Numbr,Boolean,Undefined,null,Symbol,BigInt\n    - 和Object\n")])])]),n("h3",{attrs:{id:"基本数据类型-简单数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型-简单数据类型"}},[a._v("#")]),a._v(" 基本数据类型(简单数据类型)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 基本数据类型\n    - string,number,boolean,undefined,null\n")])])]),n("h3",{attrs:{id:"引用数据类型-复杂-复合-数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型-复杂-复合-数据类型"}},[a._v("#")]),a._v(" 引用数据类型(复杂(复合)数据类型)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 引用数据类型\n    - Object,Function,Array\n")])])]),n("h3",{attrs:{id:"typeof-运算符-判断数据的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符-判断数据的类型"}},[a._v("#")]),a._v(" typeof 运算符(判断数据的类型)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  # 1. 作用:用来获取当前变量中存储的数据的类型\n  2. typeof的返回值有多少个\n    - String,Number,Boolean,Undefined,Object,Function\n    - 特殊的有两个:null和array的结果都是Object\n")])])]),n("h3",{attrs:{id:"instanceof-运算符-原生-js-判断实例的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-运算符-原生-js-判断实例的类型"}},[a._v("#")]),a._v(" instanceOf 运算符(原生 JS 判断实例的类型)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 作用:用来判断当前实例对象是不是某种数据类型\n")])])]),n("h3",{attrs:{id:"基本数据类型和引用数据类型在内存中-内存空间是如何存储数据的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型和引用数据类型在内存中-内存空间是如何存储数据的"}},[a._v("#")]),a._v(" 基本数据类型和引用数据类型在内存中,内存空间是如何存储数据的")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 除 Object 以外的所有类型都是不可变的（值本身无法被改变）,JavaScript 中字符串是不可变的（译注：如，JavaScript 中对字符串的操作一定返回了一个新字符串，原始字符串并没有被改变）。我们称这些类型的值为“原始值”。\n  2. 基本数据类型的值在栈空间中存储,如果修改了数据,则是把原来的值直接干掉,重新存放新的值\n  3. 引用数据类型的对象在堆空间中存储,该空间的地址在栈空间中存储,如果修改栈空间存储的地址,则指向发生变化,也叫引用发生了变化,此时是在堆空间中重新指向了一个新的内存空间(存储了一个新的对象)\n  4. 基本类型之间的值如何传递? 传递的是数值\n  5. 引用类型之间的值如何传递? 传递的是引用(地址)\n")])])]),n("h3",{attrs:{id:"内存-用于暂时存放-cpu-中的运算数据以及与硬盘等外部存储器交换的数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存-用于暂时存放-cpu-中的运算数据以及与硬盘等外部存储器交换的数据"}},[a._v("#")]),a._v(" 内存:用于暂时存放 CPU 中的运算数据以及与硬盘等外部存储器交换的数据")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 计算机在运行中，CPU就会把需要运算的数据调到内存中进行运算，当运算完成后CPU再将结果传送出来，内存的运行也决定了计算机的稳定运行。\n  2. 内存通电后产生的存储空间(临时的)\n  3. 产生和死亡:内存条(集成电路板)---\x3e通电---\x3e产生一定的容量存储空间---\x3e存储各种数据---\x3e断电---\x3e内存空间全部消失\n  4. 内存的空间是临时的,而硬盘的空间是持久的\n  5. 内存包含2个数据:内存存储的数据(一般数据/地址数据)和内存地址值数据\n  6. 内存分类:\n    - 栈结构: 全局变量，局部变量(空间较小)\n    - 堆结构(列表结构): 对象 (空间较大)\n")])])]),n("h3",{attrs:{id:"函数-代码的重用-分为-函数声明及函数表达式-一个函数最好是代表的是一个功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数-代码的重用-分为-函数声明及函数表达式-一个函数最好是代表的是一个功能"}},[a._v("#")]),a._v(" 函数:代码的重用,分为:函数声明及函数表达式,一个函数最好是代表的是一个功能")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("    - 函数可以隔离变量,减少命名冲突(命名污染)\n  1. 函数声明\n    - function f1() {}\n  2. 函数表达式:\n    - var fn =function (){}\n  3. 函数调用的方式:\n    - 直接调用 fn()\n    - 对象调用 obj.sayHi()\n    - new 构造函数 new Object()\n    - apply/call/bind 调用 f1.call(this,num1,num2), 改变this的指向\n")])])]),n("h3",{attrs:{id:"回调函数-定了-没有直接调用-但是最后执行了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回调函数-定了-没有直接调用-但是最后执行了"}},[a._v("#")]),a._v(" 回调函数:定了,没有直接调用,但是最后执行了")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 常见的回调\n    - DOM事件的回调\n    - 定时器中的回调\n    - ajax回调函数(后面讲)\n    - 生命周期的回调(后面讲)\n  2. 立即执行函数(Immediately-Invokey Function Expression) 匿名函数自调用\n    - (function (){})()\n    - 作用:隐藏内部实现,减少命名空间的污染\n")])])]),n("h3",{attrs:{id:"总结函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结函数"}},[a._v("#")]),a._v(" 总结函数:")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 函数也是对象(原型可以体现出来)\n  2. 函数具备行为,可以被调用\n  3. 函数:普通函数,构造函数,匿名函数(自调用:IIFE)\n  4. 回调函数(事件的回调,定时器的回调)\n")])])]),n("h3",{attrs:{id:"this-首先是一个关键字-其实也是一个特殊的变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-首先是一个关键字-其实也是一个特殊的变量"}},[a._v("#")]),a._v(" this:首先是一个关键字,其实也是一个特殊的变量")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 提前定义好的,内置变量,特殊的一个关键字\n  2. 全局的this:window\n  3. 函数中的this:\n    - 默认函数中的this是window\n    - 方法中的this是当前的实例对象\n    - 原型对象中的this是当前的实例对象\n  4. 本质上任何函数在执行时都是通过某个对象调用的\n  5. this怎么确定?函数调用的时候才能确定this是谁\n")])])]),n("h3",{attrs:{id:"预解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预解析"}},[a._v("#")]),a._v(" 预解析")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. js引擎在js代码正式执行之前会做一些预解析的操作\n  2. 先找关键字var,function\n  3. 找到var以后将var后面的变量提前声明,但是不赋值\n  4. 找到function以后将function后面的函数提前声明,但是不赋值,也就是说函数在解析之前已经定义完毕了\n  5. 变量的提升\n    - 浏览器在解析js代码之前,先把变量的声明提升\n  6. 函数的提升\n    - 浏览器在解析js代码之前,先把函数的声明提升\n  7. 注意:f2() var f2=function(){}; 报错:因为f2是undefined\n  8. 预解析:全局预解析和局部预解析\n")])])]),n("h3",{attrs:{id:"debug"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[a._v("#")]),a._v(" debug")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. debugger 调试 :直接在代码中书写debugger\n  2. 断点调试 : 浏览器中Sources中使用断点方式\n")])])]),n("h3",{attrs:{id:"null"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[a._v("#")]),a._v(" null")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 什么情况为null?\n    - 当一个对象需要释放的时候,或者叫对象不需要使用了(或者一个变量的值不需要了),此时可以设置为null\n    - 当一个对象需要释放的时候,可以手动的设置为null,此时垃圾回收机制就可以回收了,内存也就释放出来了\n    - 垃圾回收器\n    - var obj={} obj = null\n")])])]),n("h3",{attrs:{id:"执行上下文-动态的-就是一个代码的执行环境-全局执行上下文和函数执行上下文-eval-函数执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文-动态的-就是一个代码的执行环境-全局执行上下文和函数执行上下文-eval-函数执行上下文"}},[a._v("#")]),a._v(" 执行上下文(动态的):就是一个代码的执行环境(全局执行上下文和函数执行上下文,eval 函数执行上下文)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 执行上下文概念:代表了代码执行的环境,包含:执行环境,变量对象,this,作用域链\n  2. 流程:\n    - js引擎在js代码正式执行前会先创建一个执行环境\n    - 进入该环境以后会创建一个变量对象,该对象用于收集:变量,函数,函数的参数,this\n    - 找关键字var,function\n    - 确认this\n    - 创建作用域链\n  3. 在全局代码执行前,js引擎就会创建一个栈来存储管理所有的执行上下文\n  4. 在全局执行上下文(window)确定后,将其添加到栈中(压栈)\n  5. 在函数执行上下文创建后,将其添加到栈中(压栈)\n  6. 在当前函数执行完毕后,将栈顶的对象移除(出栈)\n  7. 当所有的代码执行完毕后,栈中只剩下window\n  8. 重点:执行上下文是动态创建的,尤其是针对函数,每调用一次函数都会创建一次执行上下文\n\n\n  9. 总结执行上下文: 当代码要执行,但是没有执行,或者将要执行,在预解析之后,此时出现了全局执行上下文环境(全局执行上下文),创建了一个变量对象,用来收集var , function ,函数参数,确定this的指向,默认全局执行上下文是确定了this是window,这个变量对象会被压入到栈中(全局执行上下文的变量对象在栈中的最下面),如果出现了函数调用,此时出现了局部执行上下文环境(局部执行上下文),再次创建一个变量对象,用来收集函数参数,var ,function,改变this的指向,这个变量对象会被再次压入栈中,在全局执行上下文的变量对象的上面,如果当前函数调用完毕,此时出栈(把局部上下文的变量对象干掉),依次弹出变量对象,就结束了\n")])])]),n("h3",{attrs:{id:"作用域-虚拟概念-变量的使用范围-静态的-编写代码的时候就已经确定了"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域-虚拟概念-变量的使用范围-静态的-编写代码的时候就已经确定了"}},[a._v("#")]),a._v(" 作用域(虚拟概念):变量的使用范围,静态的(编写代码的时候就已经确定了)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 全局作用域和局部作用域\n  2. 全局作用域:函数外部变量的使用范围\n  3. 局部作用域:函数内变量的使用范围(一个函数就是一个作用域)\n  4. 没有块级作用域(ES6)就有了\n  5. 作用:隔离变量,不同的作用域下同名的变量不会冲突\n  6. 变量分为:全局变量(非函数内部定义的变量)和局部变量(函数内部定义的变量)\n")])])]),n("h3",{attrs:{id:"作用域与执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域与执行上下文"}},[a._v("#")]),a._v(" 作用域与执行上下文")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 全局作用域之外,每个函数都会创建自己的作用域,作用域在函数定义时已经确定了,而不是函数调用时\n  2. 全局执行上下文环境在全局作用域确定之后,js代码马上执行之前创建\n  3. 函数执行上下文环境是在调用函数时,函数体代码执行之前创建\n  4. 作用域是静态的,只要函数定义好了就一直存在,且不会再变化\n  5. 执行上下文是动态的,调用函数时创建,函数调用结束时上下文环境就会释放\n  6. 上下文环境(对象)是从属于所在的作用域\n  7. 全局上下文环境--\x3e全局作用域\n")])])]),n("h3",{attrs:{id:"作用域链-用来查找变量的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域链-用来查找变量的"}},[a._v("#")]),a._v(" 作用域链(用来查找变量的)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 用来决定代码执行的范围,变量的作用范围\n  2. 作用域是代码定义的时候决定的\n  3. 作用域链是如何产生的\n    - 函数在定义的时候自动添加一个属性'[[Scopes]]'该属性保存的是其上级作用域链\n    - 当函数执行的时候,进入执行上下文环境,将创建的变量对象添加到'[[Scopes]]'数组的第一个位置,形成新的数组\n  4. 查找变量的规则\n    - 先在当前作用域的变量对象中查找,找到则使用\n    - 如果没有则沿着作用域链的数组去上级作用域中的变量对象中查找\n    - 找到就返回对应的值,如果没有继续向上查找,知道找到最后一个变量对象(全局的变量对象),如果没有则报错\n")])])]),n("h3",{attrs:{id:"总结执行上下文和作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结执行上下文和作用域"}},[a._v("#")]),a._v(" 总结执行上下文和作用域")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("变量的查找:\n代码编写的时候确定了当前全局作用域及局部作用域\n在代码马上执行,还没执行,执行上下文环境就出现了,函数调用完毕后,局部执行上下文没了,整个代码结束,全局的执行上下文环境也没了\n全局作用域----\x3e预解析---\x3e全局执行上下文环境---\x3e全局的变量对象{var ,function ,函数参数,this的指向}-----\x3e函数定义----\x3e局部作用域----\x3e出现了函数调用-----\x3e局部局解析---\x3e局部的执行上下文环境----\x3e局部的变量对象{var ,function ,函数参数,this的指向}\n\n-- 注意问题:函数中定义函数,内部函数没有调用,则不会出现在局部执行上下文的变量对象中\n")])])]),n("h3",{attrs:{id:"编程思想-面向对象和面向过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编程思想-面向对象和面向过程"}},[a._v("#")]),a._v(" 编程思想:面向对象和面向过程")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 面向过程:\n  2. 面向对象:\n")])])]),n("h3",{attrs:{id:"对象-具有一定的属性或者方法-特指的某个事物"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象-具有一定的属性或者方法-特指的某个事物"}},[a._v("#")]),a._v(" 对象:具有一定的属性或者方法,特指的某个事物")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 看得见或者是摸得到,特指的某个东西\n2. 识别对象,抽象出对象有什么特征和行为\n3. 抽象出当前的对象属于什么类别\n4. 以上都是抽象出对象和类别的过程,抽象性\n5. 抽象的过程要转变成代码的方式,写代码:先有类别(构造函数),创建对象并设置对象的属性及方法的初始值,对象的初始化过程,最终对象调用相关方法,操作相关属性及某些行为\n6. 特征就是属性,行为就是方法,类别就是构造函数,创建对象就是实例化的过程(初始化属性及方法的中)\n")])])]),n("h3",{attrs:{id:"创建对象的不同方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的不同方式"}},[a._v("#")]),a._v(" 创建对象的不同方式:")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 工厂模式:自定义函数实现对象的创建\n2. 通过构造函数实现对象的创建\n3. 字面量的方式创建对象\n4. 单例模式:和null是否有关系\n")])])]),n("h3",{attrs:{id:"属性访问的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性访问的方式"}},[a._v("#")]),a._v(" 属性访问的方式:")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 对象.属性名字\n2. 对象['属性名字']\n3. 什么时候使用对象[属性名字]的写法\n  - 不确定属性名字是什么(属性名字是变量)\n  - 属性名字不太规范的时候\n")])])]),n("h3",{attrs:{id:"原型-指的是原型对象-一共有两个-prototype-和proto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型-指的是原型对象-一共有两个-prototype-和proto"}},[a._v("#")]),a._v(" 原型:指的是原型对象,一共有两个,prototype 和"),n("strong",[a._v("proto")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 原型就是对象,JS中原型一共有两个,一个是prototype，一个是__proto__,\n    - prototype: 浏览器的标准属性,程序员使用的,显示原型,存在于函数中\n    - __proto__: 浏览器的非标准属性,浏览器使用的,隐式原型,存在于实例对象中\n    - 函数中有prototype,实例对象中有__proto__\n    - 实例对象也是对象,只要是对象,里面就有__proto__\n    - 无论是构造函数还是普通函数,或者是方法,只要是函数,内部就有prototype\n  2. 原型的作用之一:共享数据,节省内存空间\n  3. 原型的作用之二:实现JS中的继承\n  4. 原型对象中的方法是可以相互调用的(同一个原型对象)\n")])])]),n("p",[n("img",{attrs:{src:s(356),alt:"img"}})]),a._v(" "),n("h3",{attrs:{id:"原型的作用之一-共享数据-节省内存空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型的作用之一-共享数据-节省内存空间"}},[a._v("#")]),a._v(" 原型的作用之一:共享数据,节省内存空间")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 实例对象一般都是通过构造函数进行创建的,实例化对象的时候做的四件事:\n    - var per = new Person('卡卡西',20)\n    1) 申请一块空闲的空间,用来存储当前的实例对象\n    2) 设置this为当前的实例对象(修改this的指向)\n    3) 初始化实例对象中的属性和方法的值\n    4) 把this作为当前对象进行返回\n  2. 在构造函数中定义的属性及方法,仅仅是编写代码进行定义而已,而实际上里面定义的属性及方法是属于每个实例对象的,所以,创建多个对象,就会开辟多个空间,每个空间中的每个对象都有自己的属性及方法,大量创建对象,对象的方法都不是同一个方法(方法也是函数,函数代码也占用空间),为了节省内存空间,那么可以使用原型的方式,实现数据共享,节省内存空间\n")])])]),n("h3",{attrs:{id:"原型的作用之二-实现-js-中的继承-目的还是为了节省内存空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型的作用之二-实现-js-中的继承-目的还是为了节省内存空间"}},[a._v("#")]),a._v(" 原型的作用之二:实现 JS 中的继承,目的还是为了节省内存空间")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 通过改变原型指向实现继承\n  2. 借用构造函数实现继承\n  3. 组合继承\n  4. 拷贝继承:浅拷贝和深拷贝(递归后再说)\n")])])]),n("h3",{attrs:{id:"js-中的继承-直接改变原型指向的写法是最常见"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-中的继承-直接改变原型指向的写法是最常见"}},[a._v("#")]),a._v(" JS 中的继承:直接改变原型指向的写法是最常见")]),a._v(" "),n("h3",{attrs:{id:"总结-js-继承中注意的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结-js-继承中注意的问题"}},[a._v("#")]),a._v(" 总结 JS 继承中注意的问题:")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 改变原型指向实现继承的注意问题:\n  2. 借用构造函数实现继承注意的问题:\n  3. 组合继承及拷贝继承的注意问题\n")])])]),n("h3",{attrs:{id:"js-中的原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-中的原型链"}},[a._v("#")]),a._v(" JS 中的原型链")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("  1. 对象中有__proto__,函数中有prototype\n    - 实例对象中__proto__指向的是当前实例对象对应的构造函数中的prototype\n    - 而每个prototype都是一个对象,所以,内部必然有__proto__，普通函数中的prototype的__proto__指向的是Object的prototype\n    - 每个函数是Function的实例对象,所以,只要是函数,那么函数对象中__proto__指向的都是Function的prototype,那么这个prototype中的__proto__指向的仍然是Object的prototype\n    - 但是,Object这个构造函数也是函数,所以,Object的__proto__指向的是Function的prototype\n    - Function这个构造函数也是对象,所以里面的__proto__指向的是Function的prototype\n")])])]),n("p",[n("img",{attrs:{src:"%E5%8E%9F%E5%9E%8B.jpg",alt:"img"}})]),a._v(" "),n("h3",{attrs:{id:"闭包-函数嵌套-内部函数引用外部函数变量-使用内部函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包-函数嵌套-内部函数引用外部函数变量-使用内部函数"}},[a._v("#")]),a._v(" 闭包:函数嵌套,内部函数引用外部函数变量,使用内部函数")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 闭包内部包含了被引用变量(函数)的对象\n2. 说白了,闭包其实就是一种引用关系,引用关系存在于内部函数中,引用的是外部函数的变量的对象(深入理解)\n2. 函数内部本身是个局部作用域,如果出现闭包,延长了局部作用域的生命周期\n3. 闭包延长局部变量的生命周期后,如果不及时释放会出现内存泄漏,内存溢出\n4. 闭包作用:\n  - 闭包的作用:延长外部函数变量对象的生命周期\n  - 让函数外部可以操作(读写)函数内部的数据(变量/函数)\n5. 闭包什么产生的?\n  - 闭包在嵌套内部函数定义执行完成时就产生了(不是调用)\n6. 闭包什么时候挂的?\n  - 在嵌套的内部函数成为垃圾对象的时候\n7. 闭包的优点/缺点及如何清除闭包\n  - 优点/缺点: 延长外部函数变量对象的生命周期(不及时清除容易造成内存溢出、泄漏)\n  - 清除闭包,直接让内部的函数成为垃圾对象\n注意问题:函数中定义函数,内部函数没有调用,则不会出现在局部执行上下文的变量对象中\n")])])]),n("h3",{attrs:{id:"内存溢出和内存泄漏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出和内存泄漏"}},[a._v("#")]),a._v(" 内存溢出和内存泄漏")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 内存泄露 ：是指程序在申请内存后，无法释放已申请的内存空间就造成了内存泄漏，一次内存泄漏似乎不会有大的影响，但内存泄漏堆积后的后果就是内存溢出。\n\n2. 内存溢出： 指程序申请内存时，没有足够的内存供申请者使用，或者说，一个杯子里你非要装一桶的水，那么结果就是内存不够用，即所谓的内存溢出，简单来说就是自己所需要使用的空间比我们拥有的内存大内存不够使用所造成的内存溢出。\n")])])]),n("h3",{attrs:{id:"进程-程序的一次执行-它占用一片独有的内存空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程-程序的一次执行-它占用一片独有的内存空间"}},[a._v("#")]),a._v(" 进程: 程序的一次执行,它占用一片独有的内存空间")]),a._v(" "),n("h3",{attrs:{id:"线程-cpu-的基本调度单位-是程序执行的一个完整流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程-cpu-的基本调度单位-是程序执行的一个完整流程"}},[a._v("#")]),a._v(" 线程: CPU 的基本调度单位,是程序执行的一个完整流程")]),a._v(" "),n("h3",{attrs:{id:"进程与线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程"}},[a._v("#")]),a._v(" 进程与线程")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 一个进程中一般至少有一个运行的线程:主线程\n2. 一个进程中也可以同时运行多个线程,我们会说程序是多线程的\n3. 一个进程中的数据可以供其多个线程直接共享\n4. 多个进行质检的数据是不能直接共享的\n")])])]),n("h3",{attrs:{id:"浏览器运行是单进程还是多进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器运行是单进程还是多进程"}},[a._v("#")]),a._v(" 浏览器运行是单进程还是多进程")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 有的是单进程的\n  - firefox\n  - 老版本IE\n2. 有的是多进程\n  - chrome\n  - 新版IE\n  - 新版火狐\n3. 如何查看浏览器是否是多进程运行的\n  - 任务管理器-----\x3e进程\n  - 都是多线程运行的\n")])])]),n("h3",{attrs:{id:"浏览器内核"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[a._v("#")]),a._v(" 浏览器内核")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 支持浏览器运行的核心的程序\n2. 不同的浏览器内核不太一样\n  - IE浏览器内核：Trident内核，也是俗称的IE内核；\n  - Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核；\n  - Firefox浏览器内核：Gecko内核，俗称Firefox内核；\n  - Safari浏览器内核：Webkit内核；\n  - Opera浏览器内核：最初是自己的Presto内核，后来加入谷歌大军，从Webkit又到了Blink内核；\n  - 360浏览器、猎豹浏览器内核：IE+Chrome双内核；\n  - 搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）；\n  - 百度浏览器、世界之窗内核：IE内核；\n  - 2345浏览器内核：好像以前是IE内核，现在也是IE+Chrome双内核了；\n  - UC浏览器内核：这个众口不一，UC说是他们自己研发的U3内核，但好像还是基于Webkit和Trident，还有说是基于火狐内核。。\n")])])]),n("h3",{attrs:{id:"定时器的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定时器的问题"}},[a._v("#")]),a._v(" 定时器的问题")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 定时器真的是定时执行的吗\n  - 定时器并不能保证真正定时执行\n  - 一般会延迟一丁点(可接受),也有可能延迟很长时间(不能接受)\n2. 定时器回调函数是在分线程执行的吗\n  - 在主线程执行的,JS是单线程的\n3. 定时器是如何实现的\n  - 事件循环模型(后面讲)\n")])])]),n("h3",{attrs:{id:"js-是单线程的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-是单线程的"}},[a._v("#")]),a._v(" JS 是单线程的")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 如何证明JS执行是单线程的\n  - setImteout()的回调函数是在主线程执行的\n  - 定时器回调函数只有在运行栈中的代码全部执行完毕后才有可能执行\n2. 为什么JS要用单线程模式，而不是多线程模式\n  - JS的单线程与它的用途\n  - 作为浏览器脚本语言,JS的主要用途是与用户互动,以及操作DOM\n  - 这决定了它只能是单线程,否则会带来很复杂的同步问题\n3. 代码的分类,JS代码分两种:(同步代码和异步代码)\n  - 初始化代码\n  - 回调代码\n4. JS引擎执行代码的基本流程\n  - 先执行初始化代码:包含一些特别的代码\n    - 设置定时器\n    - 绑定监听\n    - 发送ajax请求\n  - 后面某个时刻才会执行回调代码\n\n5. JS是单线程的,代码会阻塞,JS代码分两种:(同步代码和异步代码)\n  - 同步代码:\n  - 同步会阻塞后续代码的执行\n  - 同步没有回调\n  - 异步代码:\n  - 异步是非阻塞的\n  - 异步有回调\n")])])]),n("h3",{attrs:{id:"事件循环机制-事件轮询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制-事件轮询"}},[a._v("#")]),a._v(" 事件循环机制:(事件轮询)")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. JS任务都会在JS的主线程执行\n2. 当开启一个异步任务的时候会交给对应的模块去管理\n3. 主线程继续执行后续的任务\n4. 管理模块接管的是对应的回调,它会在恰当的时机将对应的回调放入callback queue中\n5. 当主线程上所有同步任务执行完毕会通过'轮询'的方式询问callback queue 是否有可执行的回调\n6. 如果没有回调反复询问\n7. 假如有可执行的回调,将对应的回调钩到主线程执行\n")])])]),n("p",[n("img",{attrs:{src:s(357),alt:"img"}})]),a._v(" "),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. 千万不要在定时器后面放大量的代码块(会阻塞定时器,导致定时器不准确的)\n2. 定时器模块何时开始计时:\n  - 开定时器的时候交给定时器管理模块就执行\n")])])]),n("h3",{attrs:{id:"h5-规范提供了-js-分线程的实现-取名-web-workers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#h5-规范提供了-js-分线程的实现-取名-web-workers"}},[a._v("#")]),a._v(" H5 规范提供了 js 分线程的实现,取名:Web Workers")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("1. Worker:构造函数,加载分线程执行的js文件\n2. Worker.prototype.onmessage:用于接收另一个线程的回调函数\n3. Worker.prototype.postMessage:向另一个线程发送消息\n4. 不足\n  - Worker 内代码不能操作DOM(更新UI)\n  - 不能跨域加载JS\n  - 不是每个浏览器都支持这个新特性\n")])])]),n("h3",{attrs:{id:"this-指向"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-指向"}},[a._v("#")]),a._v(" this 指向")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("this 指向是动态的，看函数的调用方式")])]),a._v(" "),n("li",[n("p",[a._v("普通函数")]),a._v(" "),n("ul",[n("li",[a._v("函数直接调用 fn() --\x3e window\n"),n("ul",[n("li",[a._v("在 ES5 严格模式下('use strict') --\x3e undefined")])])]),a._v(" "),n("li",[a._v("函数隐式调用 obj.fn() --\x3e obj")]),a._v(" "),n("li",[a._v("函数显示调用 fn.call/apply(obj) --\x3e obj")]),a._v(" "),n("li",[a._v("函数 new 调用 new fn() --\x3e 实例对象")]),a._v(" "),n("li",[a._v("事件的回调函数：指向被绑定事件的 DOM 元素")]),a._v(" "),n("li",[a._v("定时器的回调函数：window\n"),n("ul",[n("li",[a._v("在 ES5 严格模式下('use strict') --\x3e undefined")])])])])]),a._v(" "),n("li",[n("p",[a._v("特殊函数")]),a._v(" "),n("ul",[n("li",[a._v("ES6 的箭头函数：指向离它最近，包裹它函数的 this（没有就是 window）\n"),n("ul",[n("li",[a._v("在 ES5 严格模式下 之前指向 window --\x3e undefined")]),a._v(" "),n("li",[a._v("不能被 new 调用，不能被 call/apply 改变 this 指向")])])])])]),a._v(" "),n("li",[n("p",[a._v("ES6 类语法（class）中的方法：指向类的实例对象")])])]),a._v(" "),n("h3",{attrs:{id:"this-指向-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-指向-2"}},[a._v("#")]),a._v(" this 指向")]),a._v(" "),n("p",[n("strong",[a._v("this 指向是动态的,看函数的调用方式")]),n("br"),a._v("\n1.全局环境中,this--\x3ewindow\n"),n("code",[a._v("console.log(this);")])]),a._v(" "),n("p",[a._v("2.在普通函数中,this--\x3ewindow")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("\tfunction fn(){\n      console.log(this);\n    }\n")])])]),n("p",[a._v("3.隐式调用,this--\x3e当前实例对象")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var obj = {\n   set: function () {\n   console.log(this)\n   }\n}\nobj.set();\n")])])]),n("p",[a._v("4.显示调用 call/apply/bind ， this--\x3e传入的指定对象")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function fn(){\n  console.log(this)\n  }\n  let obj = {\n    name : '木木'\n  }\n  fn.apply(obj);\n")])])]),n("p",[a._v("5.构造函数调用,this--\x3e当前事件发生对象")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function Person(){\n   console.log(this)\n}\nlet per = new Person()\n")])])]),n("p",[a._v("6.定时器 this--\x3ewindow")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v(" setimeout(function(){\n   console.log(this)\n },0);\n")])])]),n("p",[a._v("7.事件监听 this--\x3e当前事件对象")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("document.documentElement.addEventListener('click', function () {\n   console.log(this);\n})\n")])])]),n("p",[a._v("8.箭头函数的 this 无法修改,因为他没有自己的 this 指向---\x3ewindow")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("let obj = ()=>{\n    console.log(this);\n}\nlet obj1 = {};\nobj.apply(obj1)\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);